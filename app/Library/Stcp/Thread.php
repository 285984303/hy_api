<?php namespace App\Library\Stcp;
/**
 * Created by PhpStorm.
 * User: Will
 * Date: 2017/4/14
 * Time: 17:44
 */


use Illuminate\Support\Facades\Redis;

class Thread
{
    private $data;

    function __construct($node_id,$serv,$data)
    {
        $this->node_id = $node_id;
        $this->data = $data;
        $this->serv = $serv;
    }

    public function run()
    {
        // parent::run(); // TODO: Change the autogenerated stub
        $line_hex = $this->data;
//        \Log::debug('原始消息:'.$line_hex);
//        \Log::debug('字节数:'.strlen($line_hex));

        try {
            $line = hex2bin($line_hex);
        } catch (\Exception $e) {
            Answer::message_error(['message_no'=>0,'message_id'=>'0000','mobile'=>0],[],null);
            // $connection->disconnect();
            return;
        }

        if (empty($line)) {
            Answer::message_error(['message_no'=>0,'message_id'=>'0000','mobile'=>0],[],null);
            // $connection->disconnect();
            return;
        }

        // \Log::debug('原始消息:'.bin2hex($line));

        if (bin2hex($line) == '7e657869747e') {
            $this->serv->close($this->node_id);
            return;
        }

        try {
             \Log::debug('原始消息:'.bin2hex($line));
            $message = bin2hex(Bin::unpack($line));
            \Log::debug('接收消息:'.$message);

            $header_hex = substr($message,0,32);
            $body_hex = substr($message,32);

            $header = Bin::unpack_header_hex($header_hex);
//            \Log::debug('header:',$header);

            $redis = Redis::connection();
            /*  @var $redis \Redis */
            $redis->hSet('tcp_nodes',$header['mobile'],$this->node_id);

            if($header['body_multi']) {
                $redis = Redis::connection();
                $redis->lpush('tcp_msg_send', bin2hex($line));
                $total    = hexdec(substr($body_hex,0,4));
                $num      = hexdec(substr($body_hex,4,4));
                $body_hex = substr($body_hex,8);
                $start_no = $header['message_no']-$num+1;
                $end_no = $header['message_no']-$num+$total;
                \Log::debug('merge,start_'.$start_no.'_'.$num.'/'.$total.':'.$body_hex);
                if($total==36) {
                    file_put_contents('/tmp/upload.log', $header['message_no'] . ":" . $body_hex . "\n", FILE_APPEND);
                }
                if ($end_no > 0xffff) {
                    $end_no = $end_no - 0xffff - 1;
                }
                $key = 'message_'.$header['mobile'].'_'.$start_no;
                $redis->expire($key, 500);
                // todo 合包
                $redis->hSet($key,$num,$body_hex);

                // todo try get
                if ($num == $total) { // todo 合包条件需更改,应为收到流水号 >= $end_no 的消息
                    $count = $redis->hLen($key);
                    if ($count == $total) {
                        $packs = $redis->hGetAll($key);
                        $redis->del($key);
                        ksort($packs);
                        // \Log::debug('packs:',$packs);
                        $body_hex = implode($packs);
                        \Log::debug('---------------------图片数据------------------------:'.$body_hex);

//                        \Log::debug('header:',$header);
//                        \Log::debug('merge_body:'.$body_hex);
                        $function_name = 'message_'.$header['message_id'];
                        Answer::$function_name($header,$body_hex,$line_hex);

                        $count = $redis->lLen('message_list_'.$this->node_id);
                        for ($ri = 0;$ri < $count;$ri++) {
                            $message = $redis->rPop('message_list_'.$this->node_id);
                            if ($message && strlen($message) > 4) $this->serv->send($this->node_id,hex2bin($message));
                        }

                    } else {
                        $keys = $redis->hKeys($key);
                        $numbers=range(1,$total);
                        $lose = array_diff($numbers,$keys);
                        Request::message_8003($header['mobile'],$start_no,$lose);
                    }
                } else {
                    Answer::message_8001($header,[],$line_hex);

                    $count = $redis->lLen('message_list_'.$this->node_id);
                    for ($ri = 0;$ri < $count;$ri++) {
                        $message = $redis->rPop('message_list_'.$this->node_id);
                        if ($message && strlen($message) > 4) $this->serv->send($this->node_id,hex2bin($message));
                    }
                }
            } else {
                $function_name = 'message_'.$header['message_id'];
                Answer::$function_name($header,$body_hex,$line_hex);

                $count = $redis->lLen('message_list_'.$this->node_id);
                for ($ri = 0;$ri < $count;$ri++) {
                    $message = $redis->rPop('message_list_'.$this->node_id);
                    if ($message && strlen($message) > 4) $this->serv->send($this->node_id,hex2bin($message));
                }
            }
        } catch (\Exception $e) {
            \Log::debug($e->getLine().'：'.$e->getMessage());
            if (isset($header)) {
                Answer::message_error($header,[],null);

                $redis = Redis::connection();
                $count = $redis->lLen('message_list_'.$this->node_id);
                for ($ri = 0;$ri < $count;$ri++) {
                    $message = $redis->rPop('message_list_'.$this->node_id);
                    if ($message && strlen($message) > 4) $this->serv->send($this->node_id,hex2bin($message));
                }
            } else {
                Answer::message_error(['message_no'=>0,'message_id'=>'0000','mobile'=>0],[],null);

                $redis = Redis::connection();
                $count = $redis->lLen('message_list_'.$this->node_id);
                for ($ri = 0;$ri < $count;$ri++) {
                    $message = $redis->rPop('message_list_'.$this->node_id);
                    if ($message && strlen($message) > 4) $this->serv->send($this->node_id,hex2bin($message));
                }
            }
        }
        return;
    }
}



//ffd8ffe000104a46494600010100000100010000ffdb00430001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffdb00430101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffc0001108001a002303012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00fd5a2c79e78faf4ebdf1f5ff00ebe38b7a6e97aa6b574b63a458dcea174e542c56b134afc96033b410a0ff00798800293b88526b2f27d4ff009cfbff009c9e7ae7f54ff61cf04f87e1f02def8e3c8825d7af755bfd2dae0ec69aded2d162f2d53e5df1f982ea5490ef21d70bb41524ff00977e1bf04d6f10b8a70fc3f1c62c0d1742b633178a7055274f098792553d8d2728aa95a72a94e108b928a4dca4ed1d7f0cc972c966f8e860d54549724aa4e76bb54e0da7caafac9db44ddb5576eccfcdbd7fc01e33f0b4493ebde1ed434f85c65669612d1639e5a48cbaa74e8e41e47706b8fafe867c61e16d17c65e1cd53c3daf5bc371a7dfdbc914be705c425925413a170ca92461db6b90707390719afe7f35db486c35dd6ac6020c167aaea16b0918c79505edc451e0838fb88bd38e38c8c9afa9f17bc298786788caaa617349e659766d1c4c68cb114a14715471185f63eda15234db84e9ca35a12a75172b6f9e0e378f33eee21c856493a0e15dd7a35d4d46538a8ce33a6d732928b69a6acd3eae5cb6bc5c9e4d14515f8bf3aecffaf9ff005b5fa9f33cebb3febe7fd6d7ea15f47fc04fda1759f83375756725aff6af87afd95a7b0695a336f2e5cbdcc0424bb5d8ec6754553204546620eeaf9c28af6f20cff37e18cd70d9ce478ca982cc30ae4e957828c972c938ce9d4a7352855a5522dc674e7171927aa6f53af098ac4606bc31385a8e95583f766acf4f7ae9a77528b4ece2f4b5b5ba6dfe85fc4bfdb68eb5e1bbed13c19a3bd95dea56cf6d2ea770f22bda248922c8608da3cb49f3294943ab29071c926bf3e269649e69a7958bcb3c8f2cae49cbc923bbbb124924b33312492724f24e498e8aefe2fe3ae27e3ac651c6711e61f5b961a9ba585a34e942861b0f0949ca7eca8d35caa5525694e72729c9a49c9c5452798e6d8ecd6ac6ae32b7b4708f2c2318a85382bb6f96295af27ac9bbb6f76d59a28a28af903ce3ffd9
//ffd8ffe000104a46494600010100000100010000ffdb00430001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffdb00430101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101ffc0001108001a002303012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d0101020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00fd5a2c79e78faf4ebdf1f5ff00ebe38b7a6e97aa6b574b63a458dcea174e542c56b134afc96033b410a0ff00798800293b88526b2f27d4ff009cfbff009c9e7ae7f54ff61cf04f87e1f02def8e3c8825d7af755bfd2dae0ec69aded2d162f2d53e5df1f982ea5490ef21d70bb41524ff00977d021bf04d6f10b8a70fc3f1c62c0d1742b633178a7055274f098792553d8d2728aa95a72a94e108b928a4dca4ed1d7f0cc972c966f8e860d54549724aa4e76bb54e0da7caafac9db44ddb5576eccfcdbd7fc01e33f0b4493ebde1ed434f85c65669612d1639e5a48cbaa74e8e41e47706b8fafe867c61e16d17c65e1cd53c3daf5bc371a7dfdbc914be705c425925413a170ca92461db6b90707390719afe7f35db486c35dd6ac6020c167aaea16b0918c79505edc451e0838fb88bd38e38c8c9afa9f17bc298786788caaa617349e659766d1c4c68cb114a14715471185f63eda15234db84e9ca35a12a75172b6f9e0e378f33eee21c856493a0e15dd7a35d4d46538a8ce33a6d732928b69a6acd3eae5cb6bc5c9e4d14515f8bf3aecffaf9ff005b5fa9f33cebb3febe7fd6d7ea15f47fc04fda1759f83375756725aff6af87afd95a7b0695a336f2e5cbdcc0424bb5d8ec6754553204546620eeaf9c28af6f20cff37d0218cd70d9ce478ca982cc30ae4e957828c972c938ce9d4a7352855a5522dc674e7171927aa6f53af098ac4606bc31385a8e95583f766acf4f7ae9a77528b4ece2f4b5b5ba6dfe85fc4bfdb68eb5e1bbed13c19a3bd95dea56cf6d2ea770f22bda248922c8608da3cb49f3294943ab29071c926bf3e269649e69a7958bcb3c8f2cae49cbc923bbbb124924b33312492724f24e498e8aefe2fe3ae27d023ac651c6711e61f5b961a9ba585a34e942861b0f0949ca7d02ca8d35caa5525694e72729c9a49c9c5452798e6d8ecd6ac6ae32b7b4708f2c2318a85382bb6f96295af27ac9bbb6f76d59a28a28af